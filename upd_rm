#!/bin/bash
. ./util_f
. ./...

latest_entry=$(tail -n 1 tests.status 2>/dev/null)

if [ -z "$latest_entry" ]; then
    echo "No entries found in tests.status"
    exit 1
fi

# Check if latest test passed or failed
if echo "$latest_entry" | grep -q "Status: OK"; then
    test_status="OK"
    kernel_color="darkgreen"
    tui_badge="Passing"
    tui_color="darkgreen"
elif echo "$latest_entry" | grep -q "Status: FAIL"; then
    test_status="FAIL"
    kernel_color="darkred"
    tui_badge="Failing"
    tui_color="darkred"
else
    echo "Unknown status in tests.status"
    exit 1
fi

test_date=$(echo "$latest_entry" | cut -d'|' -f1 | xargs)
version=$(echo "$latest_entry" | cut -d'|' -f2 | cut -d':' -f2 | xargs)
iso_name=$(echo "$latest_entry" | cut -d'|' -f3 | cut -d':' -f2 | xargs)
iso_size=$(echo "$latest_entry" | cut -d'|' -f4 | cut -d':' -f2 | xargs)

kernel_version=$(uname -r | cut -d'-' -f1)

# Get KDE/Qt versions from latest Host KDE/Qt entry in tests.status
kde_entry=$(grep "Host KDE/Qt" tests.status 2>/dev/null | tail -1)
if [ -n "$kde_entry" ]; then
    plasma_ver=$(echo "$kde_entry" | grep -oP 'Plasma: \K[0-9.]+' || echo "N/A")
    frameworks_ver=$(echo "$kde_entry" | grep -oP 'Frameworks: \K[0-9.]+' || echo "N/A")
    qt_ver=$(echo "$kde_entry" | grep -oP 'Qt: \K[0-9.]+' || echo "N/A")
else
    plasma_ver="N/A"
    frameworks_ver="N/A"
    qt_ver="N/A"
fi

# Read traffic data from traffic.json
if file_ex "traffic.json"; then
    # Parse all clones entries from array, deduplicate by timestamp, sum counts
    clone_count=$(jq '[.[] | .clones[]? | select(.timestamp != null)] | unique_by(.timestamp) | map(.count) | add // 0' traffic.json)
    unique_clones=$(jq '[.[] | .clones[]? | select(.timestamp != null)] | unique_by(.timestamp) | map(.uniques) | add // 0' traffic.json)
else
    clone_count="N/A"
    unique_clones="N/A"
fi

sed -i '/<img src="\.\/vase.*\.svg"/d; /<a href.*releases.*>/d; /<table>/,/<\/table>/d; /<\/a>/d; /<br clear="left">/d; /<strong>Version/d; /^<a href.*Releases/d; /^<br><br>$/d; /^---$/d' README.md

awk -v version="$version" -v test_date="$test_date" -v iso_name="$iso_name" -v iso_size="$iso_size" -v kernel="$kernel_version" -v kernel_color="$kernel_color" -v mirror_badge="$mirror_badge" -v mirror_color="$mirror_color" -v tui_badge="$tui_badge" -v tui_color="$tui_color" -v clones="$clone_count" -v unique_clones="$unique_clones" -v plasma="$plasma_ver" -v frameworks="$frameworks_ver" -v qt="$qt_ver" '
/^# Vase$/ {
    print
    print ""
    print "<img src=\"./vase_os/vase.svg\" alt=\"VaseLogo\" width=\"117\" align=\"left\">"
    print "<a href=\"https://github.com/h8d13/Vase/releases\">"
    print "<table>"
    print "    <tr>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/Arch_Linux-v" kernel "-" kernel_color "\" alt=\"Arch\">"
    print "        </td>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/Plasma-" plasma "-darkgreen\" alt=\"Plasma\">"
    print "        </td>"
    print "    </tr>"
    print "    <tr>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/TUI_Status-" tui_badge "-" tui_color "\" alt=\"TUIStatus\">"
    print "        </td>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/Qt-" qt "-darkgreen\" alt=\"Qt\">"
    print "        </td>"
    print "    </tr>"
    print "    <tr>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/Git_Clones-" clones "-blue\" alt=\"Clones\">"
    print "        </td>"
    print "        <td>"
    print "            <img src=\"https://img.shields.io/badge/Frameworks-" frameworks "-blue\" alt=\"Frameworks\">"
    print "        </td>"
    print "    </tr>"
    print "</table>"
    print "</a>"
    print "<br clear=\"left\">"
    print ""
    print "<strong>Version:</strong> " version " | <strong>Tested:</strong> " test_date " | <strong>Size:</strong> " iso_size
    print "<br><br>"
    print "<a href=\"https://github.com/h8d13/Vase/releases\">Releases</a>"
    next
}
/^## VaseOS/ {
    print "---"
    print ""
}
# Skip multiple blank lines between Releases and VaseOS
/^<a href.*Releases/,/^## VaseOS/ {
    if (/^$/) next
}
{ print }
' README.md > README.md.tmp && mv README.md.tmp README.md

echo "README updated with latest release: ${version} (Kernel: ${kernel_version})"
