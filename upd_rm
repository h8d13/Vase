#!/bin/bash
. ./util_f
. ./...

latest_entry=$(grep "Status: OK\|Status: FAIL" tests.status 2>/dev/null | tail -n 1)

if [ -z "$latest_entry" ]; then
    echo "No entries found in tests.status"
    exit 1
fi

# Check if latest test passed or failed
if echo "$latest_entry" | grep -q "Status: OK"; then
    test_status="OK"
    kernel_color="darkgreen"
    tui_badge="Passing"
    tui_color="darkgreen"
elif echo "$latest_entry" | grep -q "Status: FAIL"; then
    test_status="FAIL"
    kernel_color="darkred"
    tui_badge="Failing"
    tui_color="darkred"
else
    echo "Unknown status in tests.status"
    exit 1
fi

test_date=$(echo "$latest_entry" | cut -d'|' -f1 | xargs)
version=$(echo "$latest_entry" | cut -d'|' -f2 | cut -d':' -f2 | xargs)
iso_name=$(echo "$latest_entry" | cut -d'|' -f3 | cut -d':' -f2 | xargs)
iso_size=$(echo "$latest_entry" | cut -d'|' -f4 | cut -d':' -f2 | xargs)

kernel_version=$(uname -r | cut -d'-' -f1)

# Get KDE/Qt versions
plasma_ver=$(pacman -Q plasma-desktop 2>/dev/null | awk '{print $2}' | cut -d'-' -f1 || echo "N/A")
frameworks_ver=$(pacman -Q karchive 2>/dev/null | awk '{print $2}' | cut -d'-' -f1 || echo "N/A")
qt_ver=$(pacman -Q qt6-base 2>/dev/null | awk '{print $2}' | cut -d'-' -f1 || echo "N/A")
kde_info="Plasma: ${plasma_ver} | Frameworks: ${frameworks_ver} | Qt: ${qt_ver}"

# Log to tests.status
echo "$(date '+%Y-%m-%d %H:%M:%S') | Host KDE/Qt: ${kde_info}" >> tests.status
echo "Logged KDE/Qt versions: Plasma ${plasma_ver}, Frameworks ${frameworks_ver}, Qt ${qt_ver}"
# Read traffic data from traffic.json (use accumulated historical total)
if file_ex "traffic.json"; then
    # Check if normalized format exists
    if jq -e '.daily_clones' traffic.json &>/dev/null; then
        # New format: sum all daily records
        clone_count=$(jq '.total_count // 0' traffic.json)
        unique_clones=$(jq '.total_uniques // 0' traffic.json)
    else
        # Old format: use latest 14-day window
        clone_count=$(jq '.[-1].count // 0' traffic.json)
        unique_clones=$(jq '.[-1].uniques // 0' traffic.json)
    fi
else
    clone_count="N/A"
    unique_clones="N/A"
fi

awk -v version="$version" -v test_date="$test_date" -v iso_name="$iso_name" -v iso_size="$iso_size" -v kernel="$kernel_version" -v kernel_color="$kernel_color" -v mirror_badge="$mirror_badge" -v mirror_color="$mirror_color" -v tui_badge="$tui_badge" -v tui_color="$tui_color" -v clones="$clone_count" -v unique_clones="$unique_clones" -v plasma="$plasma_ver" -v frameworks="$frameworks_ver" -v qt="$qt_ver" '
function badge(label, value, color) {
    return "<a href=\"https://github.com/h8d13/Vase/releases\"><img src=\"https://img.shields.io/badge/" label "-" value "-" color "\" alt=\"" label "\"></a>"
}
/^# Vase$/ {
    skip = 1
    print
    print ""
    print "<img src=\"./vase_os/vase.svg\" alt=\"VaseLogo\" width=\"117\" align=\"left\">"
    print "<table>"
    print "    <tr>"
    print "        <td>"
    print "            " badge("Arch_Linux", "v" kernel, kernel_color)
    print "        </td>"
    print "        <td>"
    print "            " badge("Plasma", plasma, "darkgreen")
    print "        </td>"
    print "    </tr>"
    print "    <tr>"
    print "        <td>"
    print "            " badge("TUI_Status", tui_badge, tui_color)
    print "        </td>"
    print "        <td>"
    print "            " badge("Qt", qt, "darkgreen")
    print "        </td>"
    print "    </tr>"
    print "    <tr>"
    print "        <td>"
    print "            " badge("Git_Clones", clones, "blue")
    print "        </td>"
    print "        <td>"
    print "            " badge("Frameworks", frameworks, "blue")
    print "        </td>"
    print "    </tr>"
    print "</table>"
    print "<br clear=\"left\">"
    print ""
    print "<strong>Version:</strong> " version " | <strong>Tested:</strong> " test_date " | <strong>Size:</strong> " iso_size
    print "<br><br>"
    print "<a href=\"https://github.com/h8d13/Vase/releases\">Releases</a>"
    print ""
    next
}
/^## VaseOS/ {
    skip = 0
    print "---"
    print ""
}
!skip { print }
' README.md > README.md.tmp && mv README.md.tmp README.md

echo "README updated with latest release: ${version} (Kernel: ${kernel_version})"
