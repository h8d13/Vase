#!/bin/bash
# Klartix - Artix Linux Bootstrap Installer
# Script for my good friend Klagan who values no being on Systemd & Minimalism approach
# Assumes x86_64, GPT/UEFI, and can run from any Linux distro

# Source utilities and colors
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "${SCRIPT_DIR}/../util_f"
if file_ex "${SCRIPT_DIR}/../.vase.d/rcw"; then
    . "${SCRIPT_DIR}/../.vase.d/rcw"
fi

# Progress bar configuration
TOTAL_STEPS=16
CURRENT_STEP=0

# Progress bar function
show_progress() {
    local step_desc="$1"
    CURRENT_STEP=$((CURRENT_STEP + 1))

    # Calculate percentage
    local percent=$((CURRENT_STEP * 100 / TOTAL_STEPS))

    # Bar width (50 characters)
    local bar_width=50
    local filled=$((CURRENT_STEP * bar_width / TOTAL_STEPS))
    local empty=$((bar_width - filled))

    # Build the bar
    local bar=""
    local i
    for i in $(seq 1 $filled); do
        bar="${bar}█"
    done
    for i in $(seq 1 $empty); do
        bar="${bar}░"
    done

    # Clear line and print progress bar
    printf "\r\033[K"
    printf "${CYAN}[%s]${NC} %3d%% (%d/%d)\n" "$bar" "$percent" "$CURRENT_STEP" "$TOTAL_STEPS"

    # Print step description below
    info "$step_desc"
}

set -e  # Exit on error

# Parse arguments
VERBOSE=0
for arg in "$@"; do
    case $arg in
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        *)
            ;;
    esac
done

# Cleanup function for failures during installation
cleanup_disk() {
    warn "Cleaning up disk..."
    swapoff -a 2>/dev/null || true

    # Unmount everything related to target disk
    mount | grep "$TARGET_DISK" | awk '{print $3}' | sort -r | while read mnt; do
        umount -l "$mnt" 2>/dev/null || true
    done

    partprobe "$TARGET_DISK" 2>/dev/null || true
    sleep 1
}

# Configuration variables
# Init system selection (openrc, runit, s6, dinit)
INIT_SYSTEM="openrc"
TARGET_DISK="/dev/sdm" # Pleqse chqnge me and will erase data.
SWAP_SIZE="4GiB"
KB_LAYOUT="us"
TARGET_TIMEZONE="Europe/Paris"
TARGET_HOSTNAME="klartix"
TARGET_USER="klagan"
ROOT_PASSWORD="Everest" # Please change me

# Host package manager for prerequisites
PKG_MAN="pacman"
PKG_MAN_W="-S"
ARG1="--noconfirm --needed"

# Prerequisites (need wget to fetch artix-bootstrap)
PKGS="wget parted"

obanner "Klartix - Artix Linux Bootstrap Installer"
nlp
info "Current block devices:"
lsblk
nlp
info "Configuration:"
echo "  Init system:  $INIT_SYSTEM"
echo "  Target disk:  $TARGET_DISK"
echo "  Swap size:    $SWAP_SIZE"
echo "  Hostname:     $TARGET_HOSTNAME"
echo "  User:         $TARGET_USER"
echo "  Timezone:     $TARGET_TIMEZONE"
nlp
warn "WARNING: This will ERASE ALL DATA on $TARGET_DISK!"
nlp
cbanner "Klartix - Artix Linux Bootstrap Installer"

read -p "Continue with installation? [y/N]: " confirm
if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    warn "Installation cancelled."
    exit 0
fi
nlp

# Set up cleanup trap now that user confirmed
trap cleanup_disk EXIT INT TERM

# Install required packages
preop "Installing required packages on host..."
$PKG_MAN $PKG_MAN_W $PKGS $ARG1

# Clean up previous files if canceled/failed install
rm -rf /tmp/artix-bootstrap*

# Ensure target mount point exists
TARGET_MOUNT="/mnt/artix"
mkdir -p "$TARGET_MOUNT"

# Clean the disk before starting
cleanup_disk

# Partitioning with three partitions: EFI, swap, and root
show_progress "Partitioning $TARGET_DISK..."
parted -s -a optimal "$TARGET_DISK" -- mklabel gpt \
    mkpart primary fat32 0% 512MiB \
    set 1 esp on \
    mkpart primary linux-swap 512MiB 4608MiB \
    mkpart primary ext4 4608MiB 100%

# Force kernel to re-read partition table
show_progress "Updating kernel partition table..."
partprobe "${TARGET_DISK}"
sleep 2

# Format partitions
show_progress "Formatting partitions..."
if [ "$VERBOSE" = "1" ]; then
    mkfs.fat -F32 "${TARGET_DISK}1"
    mkswap "${TARGET_DISK}2"
    swapon "${TARGET_DISK}2"
    mkfs.ext4 -F "${TARGET_DISK}3"
else
    mkfs.fat -F32 "${TARGET_DISK}1" > /dev/null 2>&1
    mkswap "${TARGET_DISK}2" > /dev/null 2>&1
    swapon "${TARGET_DISK}2"
    mkfs.ext4 -F -q "${TARGET_DISK}3"
fi

# Mount filesystems
show_progress "Mounting filesystems..."
mount "${TARGET_DISK}3" "$TARGET_MOUNT"       # Mount root

mkdir -p "$TARGET_MOUNT/boot/efi"
mount "${TARGET_DISK}1" "$TARGET_MOUNT/boot/efi"  # Mount EFI

# Download and extract Artix bootstrap using official artix-bootstrap tool
show_progress "Downloading Artix bootstrap tool..."
cd /tmp
if [ "$VERBOSE" = "1" ]; then
    wget https://gitea.artixlinux.org/artix/artix-bootstrap/raw/branch/master/artix-bootstrap.sh
else
    wget -q https://gitea.artixlinux.org/artix/artix-bootstrap/raw/branch/master/artix-bootstrap.sh
fi
chmod +x artix-bootstrap.sh

show_progress "Bootstrapping Artix Linux with $INIT_SYSTEM..."
if [ "$VERBOSE" = "1" ]; then
    ./artix-bootstrap.sh -i "$INIT_SYSTEM" "$TARGET_MOUNT"
else
    ./artix-bootstrap.sh -i "$INIT_SYSTEM" "$TARGET_MOUNT" > /dev/null 2>&1
fi

# At this point, artix-bootstrap should have set up the base system
# Configure chroot mounts
show_progress "Configuring chroot environment..."
mount -t proc /proc "$TARGET_MOUNT/proc"
mount -t sysfs /sys "$TARGET_MOUNT/sys"
mount -o bind /dev "$TARGET_MOUNT/dev"
mount -o bind /dev/pts "$TARGET_MOUNT/dev/pts"

# Mount efivarfs since we assume UEFI systems
show_progress "Copying host UEFI vars..."
if [ -d /sys/firmware/efi/efivars ]; then
    mount -t efivarfs efivarfs "$TARGET_MOUNT/sys/firmware/efi/efivars" 2>/dev/null || true
fi

show_progress "Copying host resolv.conf..."
cp /etc/resolv.conf "$TARGET_MOUNT/etc/"

# Generate fstab
show_progress "Generating fstab..."
if command -v fstabgen >/dev/null 2>&1; then
    fstabgen -U "$TARGET_MOUNT" > "$TARGET_MOUNT/etc/fstab"
else
    # Fallback: manual fstab generation
    echo "# Generated fstab" > "$TARGET_MOUNT/etc/fstab"
    echo "UUID=$(blkid -s UUID -o value ${TARGET_DISK}3) / ext4 defaults 0 1" >> "$TARGET_MOUNT/etc/fstab"
    echo "UUID=$(blkid -s UUID -o value ${TARGET_DISK}1) /boot/efi vfat defaults 0 2" >> "$TARGET_MOUNT/etc/fstab"
    echo "UUID=$(blkid -s UUID -o value ${TARGET_DISK}2) none swap defaults 0 0" >> "$TARGET_MOUNT/etc/fstab"
fi

# Create configuration script for chroot
show_progress "Creating chroot configuration script..."
cat > "$TARGET_MOUNT/configure.sh" << EOF
#!/bin/bash
# Klartix system configuration
set -e

# Initialize pacman keyring first
echo "Initializing pacman keyring..."
pacman-key --init
pacman-key --populate artix

# Update package databases
echo "Updating package databases..."
pacman -Sy

# Basic configuration
ln -sf /usr/share/zoneinfo/$TARGET_TIMEZONE /etc/localtime
hwclock --systohc

# Locale
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# Console keymap
echo "KEYMAP=$KB_LAYOUT" > /etc/vconsole.conf

# Hostname
echo "$TARGET_HOSTNAME" > /etc/hostname
echo "127.0.0.1 localhost" > /etc/hosts
echo "::1 localhost" >> /etc/hosts
echo "127.0.1.1 $TARGET_HOSTNAME.localdomain $TARGET_HOSTNAME" >> /etc/hosts

# DNS
echo "nameserver 8.8.8.8" > /etc/resolv.conf
echo "nameserver 8.8.4.4" >> /etc/resolv.conf

# Set root password
echo "root:$ROOT_PASSWORD" | chpasswd

# Install essential packages first
echo "Installing kernel and base packages..."
pacman -S --noconfirm linux linux-firmware grub efibootmgr base-devel sudo

# Create user
useradd -m -s /bin/bash -G wheel $TARGET_USER
echo "$TARGET_USER:$ROOT_PASSWORD" | chpasswd

# Enable sudo for wheel group
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers

# Install init-specific network manager
case "$INIT_SYSTEM" in
    openrc)
        pacman -S --noconfirm networkmanager-openrc
        rc-update add NetworkManager default
        ;;
    runit)
        pacman -S --noconfirm networkmanager-runit
        ln -s /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
        ;;
    s6)
        pacman -S --noconfirm networkmanager-s6
        s6-rc-bundle-update add default NetworkManager
        ;;
    dinit)
        pacman -S --noconfirm networkmanager-dinit
        dinitctl enable NetworkManager
        ;;
esac

# Install and configure GRUB
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Artix
grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable
grub-mkconfig -o /boot/grub/grub.cfg
EOF

show_progress "Making configuration script executable..."
chmod +x "$TARGET_MOUNT/configure.sh"

# Execute configuration in chroot
show_progress "Configuring system in chroot..."
chroot "$TARGET_MOUNT" /bin/bash /configure.sh

show_progress "Removing configuration script..."
rm "$TARGET_MOUNT/configure.sh"

# Cleanup
show_progress "Syncing data to disk..."
sync
sleep 2

show_progress "Unmounting filesystems..."
swapoff "${TARGET_DISK}2" || true
umount -l "$TARGET_MOUNT/dev/pts" 2>/dev/null || true
umount -l "$TARGET_MOUNT/dev" 2>/dev/null || true
umount -l "$TARGET_MOUNT/proc" 2>/dev/null || true
umount -l "$TARGET_MOUNT/sys" 2>/dev/null || true
umount -l "$TARGET_MOUNT/boot/efi" 2>/dev/null || true
umount -l "$TARGET_MOUNT" 2>/dev/null || true

echo ""
reop "=== Klartix installation complete! ==="
reop "You can now reboot into your new Artix Linux system."
info "Init system: $INIT_SYSTEM"
info "User: $TARGET_USER"