#!/bin/bash

. "$(dirname "$0")/../../util_f"
. "$(dirname "$0")/../../..."

script_dir="$(dirname "$0")"
iso_dir_path="${script_dir}/${vm_d}/"
iso_name="${script_dir}/${vm_d}/${iso_n}.$iso_ext"
disks_dir_path="${script_dir}/c/"
image_name="${script_dir}/c/${vm_name}.${vm_ext}"

# Global state
session_uuid=$(cat /proc/sys/kernel/random/uuid)
short_uuid=$(echo "$session_uuid" | tr -d '-' | cut -c1-6)

display="${qemu_display:-gtk}"
gl="${qemu_gl:-off}"
use_uefi="${qemu_uefi:-0}"  # Set to 0 for legacy BIOS mode

cat ./cli_art

run_vm() {
    local cmd="$1"
    $cmd
}

run_headless() {
    local cmd="$1"
    preop "Starting headless VM (serial on stdio)..."
    $cmd
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        postop "VM exited cleanly"
    else
        warn "VM exited with code: $exit_code"
    fi
}

copy_disk() {
    local image="$1"
    local temp_name
    temp_name="$(dirname "$image")/${short_uuid}$(basename "$image")"

    preop "Copying $image > $temp_name..."

    if ! file_ex "$image"; then
        postop "Error: $image not found"
        exit 1
    fi

    cp "$image" "$temp_name"

    printf "\nCopied to %s\n" "$temp_name"
    echo "$temp_name"
}

generate_mac() {
    local mac
    mac="52:54:00:$(printf '%02x:%02x:%02x' $((RANDOM % 256)) $((RANDOM % 256)) $((RANDOM % 256)))"
    preop "Generated MAC: $mac"
    echo "$mac"
}

qemu_cmd() {
    local image="$1"
    shift
    # Base command
    local cmd="qemu-system-${arch} -enable-kvm -m ${ram} -cpu host -smp ${cores}"

    # Add UEFI firmware if enabled
    if [ "$use_uefi" = "1" ]; then
        cmd="$cmd -drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2/x64/OVMF_CODE.4m.fd"
    fi

    local use_display=1
    local use_std_vga=0
    # Check for display/vga options
    for arg in "$@"; do
        if [ "$arg" = "--headless" ]; then
            use_display=0
        elif [ "$arg" = "--vga-std" ]; then
            use_std_vga=1
        fi
    done

    # Configure display
    if [ $use_display -eq 1 ]; then
        if [ $use_std_vga -eq 1 ]; then
            # Standard VGA for GRUB testing
            cmd="$cmd -vga std"
        else
            # VirtIO GPU (default)
            cmd="$cmd -vga none"
            if [ "$gl" = "on" ]; then
                cmd="$cmd -device virtio-gpu-pci -display ${display},gl=on"
            else
                cmd="$cmd -device virtio-gpu-pci -display ${display}"
            fi
        fi
    else
        # Headless: serial output to terminal, no graphical display
        cmd="$cmd -serial mon:stdio -display none"
    fi

    while [ $# -gt 0 ]; do
        case "$1" in
            --hda)
                cmd="$cmd -hda $2"
                shift 2
                ;;
            --cdrom)
                cmd="$cmd -cdrom $2"
                shift 2
                ;;
            --boot)
                cmd="$cmd -boot $2"
                shift 2
                ;;
            --serial)
                cmd="$cmd -serial $2"
                shift 2
                ;;
            --display)
                cmd="$cmd -display $2"
                shift 2
                ;;
            --spice)
                cmd="$cmd -spice $2"
                shift 2
                ;;
            --usb-drive)
                cmd="$cmd -usb -device usb-storage,drive=mydrive -drive file=$2,format=raw,if=none,id=mydrive"
                shift 2
                ;;
            --network)
                cmd="$cmd -netdev user,id=mynet0 -device e1000,netdev=mynet0,mac=$2"
                shift 2
                ;;
            --headless)
                # Already handled above
                shift
                ;;
            --vga-std)
                # Already handled above
                shift
                ;;
            --vnc)
                # Use VNC instead of auto-detected display
                cmd=$(echo "$cmd" | sed 's/-display [^ ]*/-vnc :0/')
                shift
                ;;
            *)
                shift
                ;;
        esac
    done

    echo "$cmd"
}

show_menu() {
    echo "########################################"
    echo "Zazulago VM Tooling: rdisk, then brick."
    echo "Display: ${qemu_display} | GL: ${qemu_gl}"
    echo "########################################"
    echo " rdisk   : Reset ${vm_name} ${size}"
    echo " dupk    : Permanent copy"
    echo " duck    : Temporary copy"
    echo " mayk    : Maybe Y/N copy"
    echo " brick   : Boot ISO ${iso_n}"
    echo " vncd    : Boot w VNC only"
    echo " vnck    : Run w VNC only"
    echo " std     : Run (standard VGA)"
    echo " cupkd   : Boot w ${target}"
    echo " cupk    : Run w ${target}"
    echo " taild   : Headless w logs"
    echo " bootk   : Boot headless w/ logs"
    echo " macg    : Generate MAC + run"
    echo " conkd   : Boot w ${target} and disk"
    echo " conk    : Run w ${target} and disk"
    echo " exit    : Exit"
    echo "########################################"
}

main() {
    local quick_cmd="${1:-}"  # Get quick command from argument

    # Setup
    dir_excreate "${script_dir}/a/"
    dir_excreate "${script_dir}/c/"
    dir_excreate "${script_dir}/d/"

    # Create disk if it doesn't exist
    if ! file_ex "$image_name"; then
        preop "Creating initial disk: $image_name"
        qemu-img create -f qcow2 "$image_name" "$size"
    fi

    # Check for quick command from argument (bypass menu)
    if [ -n "$quick_cmd" ]; then
        if [ "$quick_cmd" = "__default__" ]; then
            choice=""  # Empty = default action
            preop "Quick mode: running default VM"
        else
            choice="$quick_cmd"
            preop "Quick command: $choice"
        fi
    else
        # Show menu
        show_menu
        printf "Choice (any key for default): "
        read -r choice
    fi
    choice=$(echo "$choice" | tr '[:upper:]' '[:lower:]')

    # Handle choices
    case "$choice" in
        help|--help|-h)
            show_menu
            return 0
            ;;

        rdisk)
            qemu-img create -f qcow2 "$image_name" "$size"
            postop "Reset disk $image_name"
            return 0
            ;;

        exit)
            postop "Exiting."
            return 0
            ;;

        brick)
            preop "Booting from ISO ..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --cdrom "$iso_name" --boot d)
            run_vm "$cmd"
            return 0
            ;;
        vncd)
            preop "Booting from ISO (VNC)..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --cdrom "$iso_name" --boot d --vnc)
            run_vm "$cmd"
            ;;

        vnck)
            preop "Running VM (VNC)..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c --vnc)
            run_vm "$cmd"
            ;;

        std)
            preop "Running VM (standard VGA)..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c --vga-std)
            run_vm "$cmd"
            ;;

        bootk)
            preop "Headless boot..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --cdrom "$iso_name" --boot d --headless)
            run_headless "$cmd"
            ;;

        taild)
            preop "Headless run..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c --headless)
            run_headless "$cmd"
            ;;

        duck)
            temp_name=$(copy_disk "$image_name")
            cmd=$(qemu_cmd "$temp_name" --hda "$temp_name" --boot c)
            run_vm "$cmd"
            rm -f "$temp_name"
            preop "Temp disk removed"
            ;;

        dupk)
            temp_name=$(copy_disk "$image_name")
            sleep 5
            cmd=$(qemu_cmd "$temp_name" --hda "$temp_name" --boot c)
            run_vm "$cmd"
            preop "Permanent copy: $temp_name"
            ;;

        mayk)
            temp_name=$(copy_disk "$image_name")
            cmd=$(qemu_cmd "$temp_name" --hda "$temp_name" --boot c)
            run_vm "$cmd"
            printf "Save? (raw/no): "
            read -r save_choice
            save_choice=$(echo "$save_choice" | tr '[:upper:]' '[:lower:]')
            case "$save_choice" in
                raw)
                    ;;
                *)
                    rm -f "$temp_name"
                    ;;
            esac
            ;;

        macg)
            mac=$(generate_mac)
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c --network "$mac")
            run_vm "$cmd"
            ;;

        cupk)
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c --usb-drive "$target")
            run_vm "$cmd"
            ;;

        cupkd)
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --cdrom "$iso_name" --boot d --usb-drive "$target")
            run_vm "$cmd"
            ;;

        conk)
            cmd=$(qemu_cmd "" --boot c --usb-drive "$target")
            run_vm "$cmd"
            return 0
            ;;

        conkd)
            cmd=$(qemu_cmd "" --cdrom "$iso_name" --boot d --usb-drive "$target")
            run_vm "$cmd"
            return 0
            ;;

        *)
            # Default run
            preop "Running VM..."
            cmd=$(qemu_cmd "$image_name" --hda "$image_name" --boot c)
            run_vm "$cmd"
            ;;
    esac

    postop "Done...."
}

# Run main with all arguments
main "$@"
