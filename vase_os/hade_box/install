#!/bin/bash
set -e
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

. "$SCRIPT_DIR/../../util_f"
# Source constants if they exist
if file_ex "$SCRIPT_DIR/../../..."; then
    . "$SCRIPT_DIR/../../..."
fi

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "Error: This script must be run as root"
    exit 1
fi

preop "HADE_BOOT - ARCHINSTALL"

# Determine if we running from ISO or not
if [ -d "/run/archiso" ]; then
    preop "Running from Arch Linux ISO / USB Medium"
    # Always check python modules even tho they should be in ISO
    PYTHON_MODULES=(
        "cryptography:python-cryptography"
        "parted:python-pyparted"
        "pydantic:python-pydantic"
    )
    for module_pkg in "${PYTHON_MODULES[@]}"; do
        module="${module_pkg%%:*}"
        package="${module_pkg##*:}"
        if python -c "import $module" 2>/dev/null; then
            version=$(pacman -Qi "$package" 2>/dev/null | grep "^Version" | awk '{print $3}')
            preop "Found: $package (${version:-unknown})"
        else
            postop "Missing: $package ($module)"
            MISSING+=("$package")
        fi
    done
    preop "Checked only python deps. Skipping full check..."
    preop "Waiting for reflector to finish filtering mirrors..."
    timeout=60  # 60 second timeout
    elapsed=0
    while systemctl is-active reflector.service >/dev/null 2>&1; do
        sleep 1
        elapsed=$((elapsed + 1))
        if [ $elapsed -ge $timeout ]; then
            postop "Reflector timeout - continuing with current mirrorlist"
            break
        fi
    done
    [ $elapsed -lt $timeout ] && preop "Reflector finished after ${elapsed}s"
    # Backup FULL mirror list before anything happens (auto reflector)
    #if [ ! -f /etc/pacman.d/mirrorlist.original ]; then
    #    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.original 2>/dev/null || true
    #fi
else # Always check full deps when not running with ISO
   	preop "Running from live system. Checking deps..."
    chmod +x "$SCRIPT_DIR/altodeps"
   	"$SCRIPT_DIR/altodeps"
    preop "Dependency check complete. Continuing..."
fi

# Sync package database before launching TUI to prevent hangs
preop "Syncing package database... & Checking up to date."
pacman -Sy --noconfirm && pacman -S --needed archlinux-keyring || postop "Database sync failed (continuing anyway)"

export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"
python -B -m archinstall "$@"

#### OPTIONS from orignal arch install. Heavily simplified to be TUI based guided.
# All available archinstall command line options:
#
# -h, --help            show this help message and exit
# --live # --pandora    apply live install optimizations

####################### Could be super useful (ckbcomp and grub keymaps)
# --mountpoint [/mnt]   Define an alternate mount point for installation
# --skip-ntp            Disables NTP checks during installation
# --skip-wkd            Disables checking if archlinux keyring wkd sync is
#                       complete
# --skip-boot           Disables installation of a boot loader bad idea lol
# --no-pkg-lookups      Disabled package validation specifically prior to
#                       starting installation
# --offline             Disabled online upstream services such as package
#                       search and key-ring auto update
####################### Test fully local if possible see how fast it can be
# --verbose             Enabled verbose options
# --debug               Adds debug info into the log

# --config [CONFIG]     JSON configuration file
# --config-url [CONFIG_URL]
#                       Url to a JSON configuration file
# --creds [CREDS]       JSON credentials configuration file
# --creds-url [CREDS_URL]
#                       Url to a JSON credentials configuration file
# --creds-decryption-key [CREDS_DECRYPTION_KEY]
#                       Decryption key for credentials file
# --silent              WARNING: Disables all prompts for input and
#                       confirmation. If no configuration is provided, this is
#                       ignored
# --script [SCRIPT]     Script to run for installation ## Last line of installer

