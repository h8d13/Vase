#!/bin/bash
set -e  # Exit on error

# Source configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/klartix.conf"

############## DESKTOP CFG
#KLAGAN_MODE="-desktop" 
# Uncomment saves 1gb by not downloading as many plasma stuff
# plasma contains flatpak for example while plasma-desktop doesn't. so discover will be useless

echo "=== Updating system ==="
pacman -Syu --noconfirm

echo "=== Installing KDE Plasma ==="
pacman -S --noconfirm --needed plasma${KLAGAN_MODE} wayland sddm sddm-runit plasma-nm

# nice to haves
pacman -S --noconfirm --needed konsole ark dolphin

# or full apps (heavy)
#pacman -S kde-applications

echo "=== Installing audio support ==="
pacman -S --noconfirm --needed pipewire-alsa #pipewire #pipewire-pulse #pipewire-jack #wireplumber

echo "=== Setting up audio support ==="
mkdir -p /etc/pipewire
cp -r /usr/share/pipewire/pipewire* /etc/pipewire

# edit final lines of 
#/etc/pipewire/pipewire.conf just before closing ]
# { path = "/usr/bin/wireplumber" args = "" }
# { path = "/usr/bin/pipewire" args= "-c pipewire-pulse.conf" }

tac /etc/pipewire/pipewire.conf | \
  sed '0,/^]$/{s/^]$/]\n    { path = "\/usr\/bin\/pipewire" args = "-c pipewire-pulse.conf" }\n    { path = "\/usr\/bin\/wireplumber" args = "" }/}' | \
  tac | tee /tmp/pipewire.conf.tmp > /dev/null && \
  mv /tmp/pipewire.conf.tmp /etc/pipewire/pipewire.conf

mkdir -p "/home/$SUDO_USER/.config/autostart/"
cat > "/home/$SUDO_USER/.config/autostart/pipewire.desktop" <<'EOF'
[Desktop Entry]
Type=Application
Name=Pipewire
Exec=/usr/bin/pipewire
X-KDE-autostart-phase=1
EOF

chmod +x "/home/$SUDO_USER/.config/autostart/pipewire.desktop"

#echo "=== Installing Bluetooth support ==="
#pacman -S --noconfirm bluez bluez-runit bluez-utils bluedevil
# ln -sf /etc/runit/sv/bluetoothd /run/runit/service/

# Hardware detection examples - uncomment and customize based on your system

# CPU Microcode (choose one)

# pacman -S --noconfirm --needed ${HW_CPU_INTEL}
# pacman -S --noconfirm --needed ${HW_CPU_AMD}

## Graphics drivers (choose one based on your GPU)

# All open-source FALLBACK

# pacman -S --noconfirm --needed ${HW_ALL_OPENSOURCE}

# AMD/ATI only

# pacman -S --noconfirm --needed ${HW_AMD_OPENSOURCE}

# Intel only

# pacman -S --noconfirm --needed ${HW_INTEL_OPENSOURCE}


################### NVIDIA GARBOYLE
echo "=== Installing kernel headers ==="

## Edit me to the kernel you picked (eg. linux-zen-headers)
#pacman -S --noconfirm --needed linux-headers

# Nvidia proprietary 

# pacman -S --noconfirm --needed ${HW_NVIDIA_PROPRIETARY}

# Nvidia open kernel (Turing+ / newer GPUs)

# pacman -S --noconfirm --needed ${HW_NVIDIA_OPEN_KERNEL}

# Nvidia open-source nouveau (limited 3D performance)

# pacman -S --noconfirm --needed ${HW_NVIDIA_OPENSOURCE}

# Hybrid graphics (Intel iGPU + Nvidia dGPU) - add after nvidia driver (Optional)

# pacman -S --noconfirm --needed ${HW_NVIDIA_PRIME}

# Virtual Machine QEMU/KVM

# pacman -S --noconfirm --needed ${HW_VM_QEMU}

# Virtual Machine VirtualBox

# pacman -S --noconfirm --needed ${HW_VM_VIRTUALBOX}

# Audio firmware

# pacman -S --noconfirm --needed ${HW_AUDIO_SOF}
## Modern intel audio

# pacman -S --noconfirm --needed ${HW_AUDIO_ALSA}
## Older cards

echo "=== Installation complete! ==="

echo "=== Enabling services! ==="
ln -sf /etc/runit/sv/sddm /run/runit/service/

echo "=== Reboot! ==="
reboot